name: CI/CD

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    working-directory: ./
    shell: bash
  
jobs:
  unit_test:
    name: 'Run Unit Tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup env File'
        run: |
          touch .env
          echo API_ENDPOINT="https://xxx.execute-api.us-west-2.amazonaws.com" >> .env
          echo URL_SWIFT_HOST=${{ secrets.URL_SWIFT_HOST }} >> .env
          echo URL_SWIFT_API_KEY=${{ secrets.URL_SWIFT_API_KEY }} >> .env
          echo URL_SWIFT_SCHEMA=${{ secrets.URL_SWIFT_SCHEMA }} >> .env
          echo URL_SWIFT_EMAIL=${{ secrets.URL_SWIFT_EMAIL }} >> .env
          echo URL_SWIFT_PWD=${{ secrets.URL_SWIFT_PWD }} >> .env
          echo B62KG_HOST=${{ secrets.B62KG_HOST }} >> .env
          echo B62KG_API_KEY=${{ secrets.B62KG_API_KEY }} >> .env
          echo B62KG_SCHEMA=${{ secrets.B62KG_SCHEMA }} >> .env
          echo B62KG_EMAIL=${{ secrets.B62KG_EMAIL }} >> .env
          echo B62KG_PWD=${{ secrets.B62KG_PWD }} >> .env
          cat .env

      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          # The Java version to set up. Takes a whole or semver Java version. See examples of supported syntax in README file
          java-version: '17' # optional
          
          # The path to the `.java-version` file. See examples of supported syntax in README file
          #java-version-file: # optional
          
          # Java distribution. See the list of supported distributions in README file
          distribution: 'zulu'
          
          # The package type (jdk, jre, jdk+fx, jre+fx)
          java-package: 'jdk' # optional, default is jdk
          
          # The architecture of the package (defaults to the action runner's architecture)
          architecture: 'x86' # optional
          
          # Path to where the compressed JDK is located
          # jdkFile: # optional
          
          # Set this option if you want the action to check for the latest available version that satisfies the version spec
          check-latest: true # optional
          
          # ID of the distributionManagement repository in the pom.xml file. Default is `github`
          #server-id: # optional, default is github
          
          # Environment variable name for the username for authentication to the Apache Maven repository. Default is $GITHUB_ACTOR
          #server-username: # optional, default is GITHUB_ACTOR
          
          # Environment variable name for password or token for authentication to the Apache Maven repository. Default is $GITHUB_TOKEN
          #server-password: # optional, default is GITHUB_TOKEN
          
          # Path to where the settings.xml file will be written. Default is ~/.m2.
          #settings-path: # optional
          
          # Overwrite the settings.xml file if it exists. Default is "true".
          #overwrite-settings: # optional, default is true
          
          # GPG private key to import. Default is empty string.
          #gpg-private-key: # optional
          
          # Environment variable name for the GPG private key passphrase. Default is $GPG_PASSPHRASE.
          #gpg-passphrase: # optional
          
          # Name of the build platform to cache dependencies. It can be "maven", "gradle" or "sbt".
          #cache: # optional
          
          # Workaround to pass job status to post job step. This variable is not intended for manual setting
          #job-status: # optional, default is ${{ job.status }}
          
          # The token used to authenticate when fetching version manifests hosted on github.com, such as for the Microsoft Build of OpenJDK. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
          #token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
          
          # Name of Maven Toolchain ID if the default name of "${distribution}_${java-version}" is not wanted. See examples of supported syntax in Advanced Usage file
          #mvn-toolchain-id: # optional
          
          # Name of Maven Toolchain Vendor if the default name of "${distribution}" is not wanted. See examples of supported syntax in Advanced Usage file
          #mvn-toolchain-vendor: # optional

      - name: CI Maven
        # You may pin to the exact commit or the version.
        # uses: Best-Quality-Engineering/ci-maven-action@4bc4a4f9a59050271d907afee1ac7f03d171f431
        uses: Best-Quality-Engineering/ci-maven-action@v1.1.0
        with:
          # Specifies parameters used to start up the JVM running Maven
          #maven-opts: # optional
          
          # Produce execution error messages
          #errors: # optional, default is true
          
          # Run in non-interactive (batch) mode (disables output color)
          #batch-mode: # optional, default is true
          
          # Do not display transfer progress when downloading or uploading
          #no-transfer-progress: # optional, default is true
          
          # Only fail the build afterwards; allow all non-impacted builds to continue
          fail-at-end: true # optional, default is false
          
          # Stop at first failure in reactorized builds
          fail-fast: true # optional, default is false
          
          # NEVER fail the build, regardless of project result
          #fail-never: # optional, default is false
          
          # If project list is specified, also build projects required by the list
          #also-make: # optional, default is false
          
          # If project list is specified, also build projects that depend on projects on the list
          #also-make-dependents: # optional, default is false
          
          # Alternate path for the user settings file
          #settings-file: # optional
          
          # Alternate path for the user toolchains file
          #toolchains-file: # optional
          
          # Force the use of an alternate POM file (or directory with pom.xml)
          #pom-file: # optional
          
          # Defines a set of system properties in CSV or multiline format
          #system-properties: # optional
          
          # The CI-friendly revision property to use
          #revision: # optional, default is undefined
          
          # The CI-friendly sha1 property to use
          #sha1: # optional, default is undefined
          
          # The CI-friendly changelist property to use
          #changelist: # optional, default is undefined
          
          # Comma-delimited list of profiles to activate
          #profiles: # optional
          
          # Comma-delimited list of specified reactor projects to build instead of all projects. A project can be specified by [groupId]:artifactId or by its relative path
          #projects: # optional
          
          # Thread count, for instance 2.0C where C is core multiplied
          #threads: # optional
          
          # Comma separated list of goals to execute
          #goals: # optional
          # Comma separated list of phases to execute
          phases: clean, verify

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/jacoco-report


      # - name: Set up Maven 3.9.4
      #   uses: stCarolas/setup-maven@v4.5
      #   with:
      #     maven-version: 3.9.4
      
      # - name: Build with Maven
      #   run: mvn --batch-mode --update-snapshots clean package
      
      # - name: Run Unit Tests
      #   run: mvn test -Dtest="UrlSwiftServiceTest" -DfailIfNoTests=false

  generate_quality_report:
    needs: unit_test
    name: Generate quality report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      
      - name: Download JaCoCo report
        uses: actions/download-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco
          

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -DskipTests=true
  
  build:
    needs: generate_quality_report
    name: Build Native Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build native image
        run: mvn clean install -Dnative -Dquarkus.native.container-build=true
      
      - name: Upload native image
        uses: actions/upload-artifact@v2
        with:
          name: url-swift-native
          path: target/url-swift-1.0.0-native-image-source-jar